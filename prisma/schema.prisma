generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id                     String                  @id @default(cuid())
  firstName              String
  lastName               String
  dateOfBirth            DateTime
  email                  String                  @unique
  password               String
  emailVerified          DateTime?
  verificationToken      String?
  verificationExpires    DateTime?
  image                  String?
  role                   Role                    @default(USER)
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  resetToken             String?
  resetTokenExpires      DateTime?
  accounts               Account[]
  equipmentTransactions  EquipmentTransaction[]
  greenEnergyInvestments GreenEnergyInvestment[]
  kyc                    KYC?
  marketInvestments      MarketInvestment[]
  notifications          Notification[]
  propertyTransactions   PropertyTransaction[]
  realEstateInvestments  RealEstateInvestment[]
  referralsReceived      Referral[]              @relation("ReferralReceiver")
  referralsGiven         Referral[]              @relation("ReferralGiver")
  sessions               Session[]
  wallet                 Wallet?

  @@index([email])
  @@index([role])
}

model KYC {
  id              String    @id @default(cuid())
  userId          String    @unique
  status          KycStatus @default(PENDING)
  country         String
  documentType    String
  documentNumber  String?
  documentImage   String
  submittedAt     DateTime  @default(now())
  reviewedAt      DateTime?
  rejectionReason String?
  reviewedBy      String?
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([status])
}

model Wallet {
  id           String              @id @default(cuid())
  userId       String              @unique
  balance      Float               @default(0)
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
  btcAddress   String?
  usdtAddress  String?
  user         User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions WalletTransaction[]

  @@index([userId])
}

model WalletTransaction {
  id          String            @id @default(cuid())
  walletId    String
  type        TransactionType
  amount      Float
  status      TransactionStatus
  cryptoType  String
  txHash      String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  description String?
  wallet      Wallet            @relation(fields: [walletId], references: [id], onDelete: Cascade)

  @@index([walletId])
  @@index([status])
  @@index([type])
}

model Property {
  id           String                @id @default(cuid())
  name         String
  description  String
  price        Decimal               @db.Decimal(10, 2)
  location     String
  mapUrl       String?
  features     Json
  images       String[]
  status       PropertyStatus        @default(AVAILABLE)
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt
  mainImage    String
  transactions PropertyTransaction[]

  @@index([status])
  @@index([price])
}

model PropertyTransaction {
  id                String                  @id @default(cuid())
  propertyId        String
  userId            String
  amount            Decimal                 @db.Decimal(10, 2)
  type              PropertyTransactionType
  status            TransactionStatus
  installments      Int?
  installmentAmount Decimal?                @db.Decimal(10, 2)
  nextPaymentDue    DateTime?
  createdAt         DateTime                @default(now())
  updatedAt         DateTime                @updatedAt
  paidInstallments  Int                     @default(0)
  property          Property                @relation(fields: [propertyId], references: [id])
  user              User                    @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([propertyId])
  @@index([status])
}

model Equipment {
  id            String                 @id @default(cuid())
  name          String
  description   String
  type          EquipmentType
  price         Decimal                @db.Decimal(10, 2)
  status        EquipmentStatus        @default(AVAILABLE)
  createdAt     DateTime               @default(now())
  updatedAt     DateTime               @updatedAt
  features      Json
  stockQuantity Int                    @default(0)
  images        Json
  transactions  EquipmentTransaction[]

  @@index([status])
  @@index([type])
}

model EquipmentTransaction {
  id              String            @id @default(cuid())
  equipmentId     String
  userId          String
  status          TransactionStatus @default(PENDING)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  quantity        Int               @default(1)
  trackingNumber  String?
  deliveryPin     String?
  deliveryDate    DateTime?
  totalAmount     Decimal           @db.Decimal(10, 2)
  deliveryAddress Json?
  equipment       Equipment         @relation(fields: [equipmentId], references: [id])
  user            User              @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([equipmentId])
  @@index([status])
}

model MarketInvestment {
  id             String           @id @default(cuid())
  userId         String
  planId         String
  amount         Decimal         @db.Decimal(10, 2)
  startDate      DateTime
  endDate        DateTime
  expectedReturn Decimal         @db.Decimal(10, 2)
  actualReturn   Decimal?        @db.Decimal(10, 2)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  reinvest       Boolean          @default(false)
  status         InvestmentStatus @default(ACTIVE)
  user           User             @relation(fields: [userId], references: [id])
  plan           MarketInvestmentPlan @relation(fields: [planId], references: [id])

  @@index([userId])
  @@index([planId])
}

model Referral {
  id             String         @id @default(cuid())
  referrerId     String
  referredId     String
  commission     Float
  status         ReferralStatus
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  commissionPaid Boolean        @default(false)
  referred       User           @relation("ReferralReceiver", fields: [referredId], references: [id])
  referrer       User           @relation("ReferralGiver", fields: [referrerId], references: [id])

  @@index([referrerId])
  @@index([referredId])
  @@index([status])
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  type      NotificationType
  title     String
  message   String
  read      Boolean          @default(false)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  actionUrl String?
  user      User             @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([read])
  @@index([type])
}

model RealEstateInvestment {
  id             String                   @id @default(cuid())
  userId         String
  type           RealEstateInvestmentType
  amount         Decimal                  @db.Decimal(10, 2)
  status         InvestmentStatus         @default(ACTIVE)
  startDate      DateTime
  endDate        DateTime
  expectedReturn Decimal                  @db.Decimal(10, 2)
  actualReturn   Decimal?                 @db.Decimal(10, 2)
  reinvest       Boolean                  @default(false)
  createdAt      DateTime                 @default(now())
  updatedAt      DateTime                 @updatedAt
  user           User                     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([status])
  @@index([type])
}

model GreenEnergyInvestment {
  id             String                    @id @default(cuid())
  userId         String
  type           GreenEnergyInvestmentType
  amount         Decimal                   @db.Decimal(10, 2)
  status         InvestmentStatus          @default(ACTIVE)
  startDate      DateTime                  @default(now())
  endDate        DateTime?
  expectedReturn Decimal                   @db.Decimal(10, 2)
  actualReturn   Decimal?                  @db.Decimal(10, 2)
  reinvest       Boolean                   @default(false)
  createdAt      DateTime                  @default(now())
  updatedAt      DateTime                  @updatedAt
  planId         String
  plan           GreenEnergyPlan           @relation(fields: [planId], references: [id])
  user           User                      @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([planId])
  @@index([status])
  @@index([type])
}

model InvestmentPlan {
  id             String                   @id @default(cuid())
  name           String
  description    String
  type           RealEstateInvestmentType
  minAmount      Decimal                  @db.Decimal(10, 2)
  maxAmount      Decimal                  @db.Decimal(10, 2)
  returnRate     Decimal                  @db.Decimal(5, 2)
  image          String?
  createdAt      DateTime                 @default(now())
  updatedAt      DateTime                 @updatedAt
  durationMonths Int                      @default(1)

  @@index([type])
}

model GreenEnergyPlan {
  id             String                    @id @default(cuid())
  name           String
  description    String
  type           GreenEnergyInvestmentType
  minAmount      Decimal                   @db.Decimal(10, 2)
  maxAmount      Decimal                   @db.Decimal(10, 2)
  returnRate     Decimal                   @db.Decimal(5, 2)
  durationMonths Int                       @default(6)
  image          String?
  createdAt      DateTime                  @default(now())
  updatedAt      DateTime                  @updatedAt
  investments    GreenEnergyInvestment[]

  @@index([type])
}

model MarketInvestmentPlan {
  id             String           @id @default(cuid())
  name           String
  description    String
  type           MarketPlanType
  minAmount      Decimal         @db.Decimal(10, 2)
  maxAmount      Decimal         @db.Decimal(10, 2)
  returnRate     Decimal         @db.Decimal(5, 2)
  durationMonths Int             @default(6)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  investments    MarketInvestment[]

  @@index([type])
}

enum Role {
  USER
  ADMIN
}

enum KycStatus {
  PENDING
  APPROVED
  REJECTED
}

enum TransactionType {
  DEPOSIT
  WITHDRAWAL
  PAYOUT
  INVESTMENT
  RETURN
  COMMISSION
  PURCHASE
}

enum TransactionStatus {
  PENDING
  ACCEPTED
  PROCESSING
  OUT_FOR_DELIVERY
  COMPLETED
  FAILED
  CANCELLED
}

enum PropertyTransactionType {
  FULL
  INSTALLMENT
}

enum PropertyStatus {
  AVAILABLE
  PENDING
  SOLD
}

enum EquipmentStatus {
  AVAILABLE
  PENDING
  SOLD
}

enum EquipmentType {
  SOLAR_PANEL
  WIND_TURBINE
  BATTERY_STORAGE
  INVERTER
}

enum RealEstateInvestmentType {
  SEMI_ANNUAL
  ANNUAL
}

enum GreenEnergyInvestmentType {
  SEMI_ANNUAL
  ANNUAL
}

enum InvestmentStatus {
  ACTIVE
  MATURED
  CANCELLED
}

enum MarketPlanType {
  SEMI_ANNUAL
  ANNUAL
}

enum ReferralStatus {
  PENDING
  COMPLETED
  EXPIRED
}

enum NotificationType {
  INVESTMENT_MATURED
  PAYMENT_DUE
  KYC_STATUS
  SYSTEM_UPDATE
  REFERRAL_COMPLETED
  WALLET_UPDATED
}
